package com.codetreatise.controller;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.function.Predicate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import com.codetreatise.bean.Personel;
import com.codetreatise.bean.Utilisateur;
import com.codetreatise.repository.StaffRepository;
import com.codetreatise.repository.UserRepository;
import com.codetreatise.service.MethodUtilitaire;
import com.codetreatise.service.impl.UserServiceImpl;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.util.Callback;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

@Controller
public class UserController implements Initializable {
	@FXML
	private Label userId;
	@FXML
	private ComboBox<String> user;
	@FXML
	private ComboBox<String> access;
	@FXML
	private TextField login;
	@FXML
	private TextField id;
	@FXML
	private TextField recherche;
	@FXML
	private PasswordField password;
	@FXML
	private Button reset;
	@FXML
	private TableView<Utilisateur> userTable;
	@FXML
	private TableColumn<Utilisateur, String> idC;
	@FXML
	private TableColumn<Utilisateur, String> FirstNameC;
	@FXML
	private TableColumn<Utilisateur, String> LastNameC;
	@FXML
	private TableColumn<Utilisateur, String> accessC;
	@FXML
	private TableColumn<Utilisateur, String> LoginC;
	@FXML
	private TableColumn<Utilisateur, String> passC;
	@FXML
	private TableColumn<Utilisateur, Boolean> editC;
	@FXML
	private MenuItem deleteUsers;
	@FXML
	private ComboBox<String> filtre;
	@Autowired
	private StaffRepository staffRepository;
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private UserServiceImpl userServiceImpl;
	@Autowired
	private MethodUtilitaire methodUtilitaire;

	ObservableList<String> personelList = FXCollections.observableArrayList();
	ObservableList<String> roleList = FXCollections.observableArrayList("Administrateur", "Super administrateur",
			"Pointeur", "Creancier", "Discipline", "Bibliotheque", "Infirmerie", "Enseignant");
	ObservableList<String> roleList2 = FXCollections.observableArrayList("Administrateur", "Super administrateur",
			"Pointeur", "Creancier", "Discipline", "Bibliotheque", "Infirmerie", "Enseignant", "All");
	Map<String, Long> mapId = new HashMap<String, Long>();

	// Event Listener on MenuItem.onAction
	@FXML
	public void exit(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Button[#reset].onAction
	@FXML
	public void handleResetClick(ActionEvent event) {
		clearField();
	}

	// Event Listener on Button.onAction
	@FXML
	public void handleSaveClick(ActionEvent event) throws  Exception {
		if (isInputValid()) {
			Long id = mapId.get(getUser());
			Personel personel = staffRepository.findOne(id);
			Utilisateur utilisateur = new Utilisateur();
			Utilisateur newUtilisateur = null;
			utilisateur.setPass(getPass());
			utilisateur.setLogin(getLogin());
			utilisateur.setAcces(getAcces());
			utilisateur.setId(id);
			utilisateur.setNom(personel.getNom());
			utilisateur.setPrenom(personel.getPrenom());
			if (MethodUtilitaire.confirmationDialog(utilisateur, "Confirm to save user", "Confirm to save user",
					"do you want to save user " + personel.getNom() + " " + personel.getPrenom() + " whith login "
							+ utilisateur.getLogin() + " and password " + utilisateur.getPass()))
				newUtilisateur = userRepository.save(utilisateur);
			MethodUtilitaire.saveAlert(newUtilisateur, "User save successful",
					"User " + personel.getNom() + " " + personel.getPrenom() + " has saved sucessful");
			clearField();
			loadDataOnTable();
			methodUtilitaire.LogFile("Creation d'un utilisateur", newUtilisateur.getId()+"-"+newUtilisateur.getNom()+" "+newUtilisateur.getPrenom(), MethodUtilitaire.deserializationUser());
		}
	}

	// Event Listener on MenuItem[#deleteUsers].onAction
	@FXML
	public void deleteUsers(ActionEvent event) throws IOException, Exception {
		Utilisateur selectedIndex = userTable.getSelectionModel().getSelectedItem();
		if (selectedIndex != null) {
			userTable.getItems().remove(selectedIndex);
			userRepository.delete(selectedIndex);
			methodUtilitaire.LogFile("Soppression d'un utilisateur", selectedIndex.getId()+"-"+selectedIndex.getNom()+" "+selectedIndex.getPrenom(), MethodUtilitaire.deserializationUser());
		} else {
			MethodUtilitaire.deleteNoPersonSelectedAlert("No Selection", "No user Selected",
					"Please select a user in the table.");
		}
	}

	// Event Listener on Button.onAction
	@FXML
	public void handleRefreshClick(ActionEvent event) {
		loadDataOnTable();
	}

	// Event Listener on TextField.onKeyReleased
	@FXML
	public void handleFilterPressed(KeyEvent event) {
		FilteredList<Utilisateur> filtereduser = new FilteredList<Utilisateur>(userList, e -> true);
		recherche.setOnKeyReleased(e -> {
			recherche.textProperty().addListener((observableValue, oldValue, newValue) -> {
				filtereduser.setPredicate((Predicate<? super Utilisateur>) personel -> {
					if (newValue == null || newValue.isEmpty()) {
						return true;
					}
					String newValueFilter = newValue.toLowerCase();

					if (personel.getId().toString().toLowerCase().contains(newValueFilter)) {
						return true;
					} else if (personel.getNom().toLowerCase().contains(newValueFilter)) {
						return true;
					} else if (personel.getPrenom().toLowerCase().contains(newValueFilter)) {
						return true;
					}
					return false;
				});
			});
		});

		SortedList<Utilisateur> sortedList = new SortedList<Utilisateur>(filtereduser);
		sortedList.comparatorProperty().bind(userTable.comparatorProperty());
		userTable.setItems(sortedList);
	}

	// Event Listener on Button.onAction
	@FXML
	public void handlePrintClick(ActionEvent event) {
		try {
			String acces = filtre.getSelectionModel().getSelectedItem();
			System.setProperty("java.awt.headless", "false");
			JasperDesign jasperDesign = JRXmlLoader.load("C:\\wamp\\listUtilisateur.jrxml");
			String sql1 = "select * from utilisateur";
			String sql2 = "select * from utilisateur where acces='" + acces + "'";
			JRDesignQuery designQuery = new JRDesignQuery();
			if (acces == "All") 
				designQuery.setText(sql1);
			else
				designQuery.setText(sql2);
			jasperDesign.setQuery(designQuery);
			JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
			JasperPrint print = JasperFillManager.fillReport(jasperReport, null, MethodUtilitaire.dbConnect());
			JasperViewer jrviewer = new JasperViewer(print, false);
			// JasperViewer.viewReport(print);
			jrviewer.setVisible(true);
			jrviewer.toFront();
		} catch (SQLException | JRException | ClassNotFoundException e) {
			e.printStackTrace();
			MethodUtilitaire.errorMessageAlert("Failed to print", "Failed to print !", e.getMessage());
		}
	}

	@FXML
	public void handleEditClick(ActionEvent event) {
		if (isInputValid()) {
			try {
				Utilisateur utilisateur = userRepository.findOne(Long.parseLong(id.getText()));
				Utilisateur newUtilisateur = null;
				utilisateur.setLogin(getLogin());
				utilisateur.setPass(getPass());
				utilisateur.setAcces(getAcces());
				if (MethodUtilitaire.confirmationDialog(utilisateur, "Confirm to update user", "Confirm to update user",
						"do you want to update user " + utilisateur.getNom() + " " + utilisateur.getPrenom()
								+ " whith login " + utilisateur.getLogin() + " and password " + utilisateur.getPass()))
					newUtilisateur = userServiceImpl.update(utilisateur);
				MethodUtilitaire.saveAlert(newUtilisateur, "User update successful",
						"User " + newUtilisateur.getNom() + " " + newUtilisateur.getPrenom() + " has update sucessful");
				clearField();
				loadDataOnTable();
				methodUtilitaire.LogFile("Mise ajour des données d'utilisateur", newUtilisateur.getId()+"-"+newUtilisateur.getNom()+" "+newUtilisateur.getPrenom(), MethodUtilitaire.deserializationUser());
			} catch (Exception e) {
				MethodUtilitaire.deleteNoPersonSelectedAlert("No user selected", "No user selected",
						"Select firstly one user in table and try agane");
			}
		}
	}

	private ObservableList<Utilisateur> userList = FXCollections.observableArrayList();

	private void setuser() {
		personelList.clear();
		mapId.clear();
		List<Personel> list = staffRepository.findAllOderByName();
		for (Personel personel : list) {
			personelList.add(personel.toString());
			mapId.put(personel.toString(), personel.getId());
		}
		user.setItems(personelList);
	}

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		access.setItems(roleList);
		filtre.setItems(roleList2);
		filtre.getSelectionModel().selectLast();
		setuser();
		setColumnProperties();
	}

	private void setColumnProperties() {
		idC.setCellValueFactory(
				new Callback<TableColumn.CellDataFeatures<Utilisateur, String>, ObservableValue<String>>() {

					@Override
					public ObservableValue<String> call(CellDataFeatures<Utilisateur, String> param) {
						return new SimpleStringProperty(param.getValue().getId().toString());
					}
				});
		FirstNameC.setCellValueFactory(
				new Callback<TableColumn.CellDataFeatures<Utilisateur, String>, ObservableValue<String>>() {

					@Override
					public ObservableValue<String> call(CellDataFeatures<Utilisateur, String> param) {
						return new SimpleStringProperty(param.getValue().getNom());
					}
				});
		LastNameC.setCellValueFactory(
				new Callback<TableColumn.CellDataFeatures<Utilisateur, String>, ObservableValue<String>>() {

					@Override
					public ObservableValue<String> call(CellDataFeatures<Utilisateur, String> param) {
						return new SimpleStringProperty(param.getValue().getPrenom());
					}
				});
		accessC.setCellValueFactory(new PropertyValueFactory<>("acces"));
		LoginC.setCellValueFactory(new PropertyValueFactory<>("login"));
		passC.setCellValueFactory(new PropertyValueFactory<>("pass"));
		editC.setCellFactory(cellFactory);
	}

	private void loadDataOnTable() {
		userList.clear();
		if (filtre.getSelectionModel().getSelectedItem() == "All") {
			userList.addAll(userRepository.findAll());
			userTable.setItems(userList);
		} else {
			userList.addAll(userRepository.findByAcces(filtre.getSelectionModel().getSelectedItem()));
			userTable.setItems(userList);
		}
	}

	private void clearField() {
		user.setDisable(false);
		id.clear();
		user.getSelectionModel().clearSelection();
		access.getSelectionModel().clearSelection();
		login.clear();
		password.clear();
	}

	private String getUser() {
		return user.getSelectionModel().getSelectedItem();
	}

	private String getAcces() {
		return access.getSelectionModel().getSelectedItem();
	}

	private String getLogin() {
		return login.getText();
	}

	private String getPass() {
		return password.getText();
	}

	Callback<TableColumn<Utilisateur, Boolean>, TableCell<Utilisateur, Boolean>> cellFactory = new Callback<TableColumn<Utilisateur, Boolean>, TableCell<Utilisateur, Boolean>>() {
		@Override
		public TableCell<Utilisateur, Boolean> call(final TableColumn<Utilisateur, Boolean> param) {
			final TableCell<Utilisateur, Boolean> cell = new TableCell<Utilisateur, Boolean>() {
				Image imgEdit = new Image(getClass().getResourceAsStream("/images/edit.png"));
				final Button btnEdit = new Button();

				@Override
				public void updateItem(Boolean check, boolean empty) {
					super.updateItem(check, empty);
					if (empty) {
						setGraphic(null);
						setText(null);
					} else {
						btnEdit.setOnAction(e -> {
							Utilisateur utilisateur = getTableView().getItems().get(getIndex());
							updateUser(utilisateur);
						});

						btnEdit.setStyle("-fx-background-color: transparent;");
						ImageView iv = new ImageView();
						iv.setImage(imgEdit);
						iv.setPreserveRatio(true);
						iv.setSmooth(true);
						iv.setCache(true);
						btnEdit.setGraphic(iv);

						setGraphic(btnEdit);
						setAlignment(Pos.CENTER);
						setText(null);
					}
				}

				private void updateUser(Utilisateur utilisateur) {
					id.setText(utilisateur.getId().toString());
					user.setDisable(true);
					user.getSelectionModel().select(utilisateur.toString());
					access.getSelectionModel().select(utilisateur.getAcces());
					login.setText(utilisateur.getLogin());
					password.setText(utilisateur.getPass());
				}
			};
			return cell;
		}
	};

	private boolean isInputValid() {
		String errorMessage = "";

		if (getUser() == null || getUser().length() == 0) {
			errorMessage += "No valid field user to tick!\n";
		}

		if (getAcces() == null || getAcces().length() == 0) {
			errorMessage += "No valid field acces!\n";
		}

		if (getLogin() == null || getLogin().length() == 0) {
			errorMessage += "No valid field login!\n";
		}

		if (getPass() == null || getPass().length() == 0) {
			errorMessage += "No valid field password!\n";
		}

		if (errorMessage.length() == 0) {
			return true;
		} else {
			MethodUtilitaire.errorMessageAlert("Invalid Fields", "Please correct invalid fields", errorMessage);
			return false;
		}
	}

}
